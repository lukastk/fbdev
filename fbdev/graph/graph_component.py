"""TODO fill in description"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/api/01_graph/03_graph_component.ipynb.

# %% ../../nbs/api/01_graph/03_graph_component.ipynb 4
from __future__ import annotations
import asyncio
from abc import abstractmethod
from types import MappingProxyType
from typing import Type, Tuple, Dict

import fbdev
from ..comp.port import PortType, PortSpec, PortSpecCollection, PortID
from ..comp.base_component import BaseComponent
from .graph_spec import GraphSpec, NodeSpec
from .packet_registry import PacketRegistry
from .net import Edge, BaseNode
from ..exceptions import NodeError, EdgeError

# %% auto 0
__all__ = ['GraphComponentFactory']

# %% ../../nbs/api/01_graph/03_graph_component.ipynb 7
class GraphComponentFactory(BaseComponent, inherit_ports=False):
    is_factory = True
    expose_graph = True
    graph: GraphSpec = None
    
    port_specs = PortSpecCollection()
    
    def __init__(self):
        super().__init__()
        self._parent_node: BaseNode = None # Must be set by its node in BaseNode.start()
        self._nodes: Dict[str, Node] = {}
        self._edges: Dict[str, Edge] = {}
            
    @property
    def nodes(self) -> MappingProxyType[str, Node]: return MappingProxyType(self._nodes)
    @property
    def edges(self) -> MappingProxyType[str, Edge]: return MappingProxyType(self._edges)
    
    @property
    def _packet_registry(self) -> PacketRegistry: return self._parent_net._packet_registry
    
    def _handle_node_exception(self, task:asyncio.Task, exceptions:Tuple[Exception, ...], source_trace:Tuple, tracebacks:Tuple[str, ...]):
        try: raise NodeError() from exceptions[0]
        except NodeError as e: self.task_manager.submit_exception(task, exceptions + (e,), source_trace, tracebacks)
    
    def _handle_edge_exception(self, task:asyncio.Task, exceptions:Tuple[Exception, ...], source_trace:Tuple, tracebacks:Tuple[str, ...]):
        try: raise EdgeError() from exceptions[0]
        except EdgeError as e: self.task_manager.submit_exception(task, exceptions + (e,), source_trace, tracebacks)
    
    @classmethod
    def create_component(cls, graph, expose_graph=True) -> Type[BaseComponent]:
        graph = graph.copy()
        graph.make_readonly()
        return cls._create_component_class(class_attrs={
            'graph' : graph,
            'expose_graph' : expose_graph,
            'port_specs' : graph._port_specs
        })
        
    async def _post_start(self):
        for node_spec in self.graph.nodes.values():
            self._nodes[node_spec.id] = node_spec.create_node(self._parent_node)
            self._nodes[node_spec.id].task_manager.subscribe(self._handle_node_exception)
        for edge_spec in self.graph.edges.values():
            self._edges[edge_spec.id] = Edge(edge_spec, self)
            self._edges[edge_spec.id].task_manager.subscribe(self._handle_edge_exception)
        
        await asyncio.gather(*[node.start() for node in self._nodes.values()])
        for edge in self.edges.values(): edge.start()
        
    async def _pre_stop(self):
        await asyncio.gather(*[node.stop() for node in self._nodes.values()])
        await asyncio.gather(*[edge.stop() for edge in self._edges.values()])
