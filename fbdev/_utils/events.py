"""TODO fill in description"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/api/utils/events.ipynb.

# %% ../../nbs/api/utils/events.ipynb 4
from __future__ import annotations
import asyncio
from typing import List, Callable

import fbdev
from .attr_container import AttrContainer

# %% auto 0
__all__ = ['await_multiple_events', 'await_any_event', 'ReadonlyEvent', 'EventHandler', 'EventCollection']

# %% ../../nbs/api/utils/events.ipynb 6
async def await_multiple_events(*events):
    try:
        event_await_tasks = []
        while not all([event.is_set() for event in events]): # In the off-chance that as asyncio.wait finishes, one of the events is cleared
            event_await_tasks.clear()
            for event in events:
                event_await_tasks.append(asyncio.create_task(event.wait()))
            await asyncio.wait(event_await_tasks)
    except asyncio.CancelledError:
        for task in event_await_tasks:
            task.cancel()
            try: await task
            except asyncio.CancelledError: pass
        raise

# %% ../../nbs/api/utils/events.ipynb 8
async def await_any_event(*events):
    try:
        event_await_tasks = [asyncio.create_task(event.wait()) for event in events]
        await asyncio.wait(event_await_tasks, return_when=asyncio.FIRST_COMPLETED)
    except asyncio.CancelledError:
        for task in event_await_tasks:
            task.cancel()
            try: await task
            except asyncio.CancelledError: pass
        raise

# %% ../../nbs/api/utils/events.ipynb 11
class ReadonlyEvent:
    def __init__(self, event: asyncio.Event):
        self._event = event

    def is_set(self):
        return self._event.is_set()

    async def wait(self):
        await self._event.wait()

# %% ../../nbs/api/utils/events.ipynb 13
class EventHandler:
    """Subscribable events"""
    def __init__(self, name):
        self._events: List[asyncio.Event] = []
        self._callbacks: List[Callable] = []
        self.name = name
    
    def subscribe(self):
        event = asyncio.Event()
        self._events.append(event)
        return event
    
    def register_callback(self, callback):
        self._callbacks.append(callback)

    def _trigger(self):
        for event in self._events:
            event.set()
        self._events.clear()
        for callback in self._callbacks:
            callback()
        
    def __str__(self):
        return f"EventHandler(name='{self.name}')"
    
    def __repr__(self):
        return str(self)

# %% ../../nbs/api/utils/events.ipynb 15
class EventCollection(AttrContainer):
    def __init__(self) -> None:
        super().__init__({}, obj_name="EventCollection")
    
    def _add_event(self, event_handler: EventHandler):
        self._set(event_handler.name, event_handler)
