# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/api/packet_container.ipynb.

# %% auto 0
__all__ = ['FullEmpty', 'PacketContainer', 'SinglePacketContainer', 'DequePacketContainer']

# %% ../nbs/api/packet_container.ipynb 4
import asyncio
from abc import ABC, abstractmethod
from typing import Type, Callable, Any
import inspect
from collections import deque
from enum import Enum

import fbdev
from .packet import Packet
from .utils import EventHandler, StateHandler, StateView

# %% ../nbs/api/packet_container.ipynb 5
__all__ = ['PacketContainer', 'SinglePacketContainer', 'DequePacketContainer']

# %% ../nbs/api/packet_container.ipynb 6
FullEmpty = Enum('PacketContainerStatus', ['EMPTY', 'FULL'])
FullEmpty = Enum('PacketContainerStatus', ['NON_EMPTY', 'EMPTY', 'AVAILABLE', 'FULL'])

# %% ../nbs/api/packet_container.ipynb 8
class PacketContainer(ABC):
    def __init__(self):
        self._empty = StateHandler(True)
        self._full = StateHandler(False)
        self.empty = StateView(self._empty)
        self.full = StateView(self._full)
        
        self.has_changed = EventHandler()
    
    @abstractmethod
    def load(self,
            packet: Packet):
        #TODO proper exception
        if self._full.get(): raise Exception("Port is full.")
        self.has_changed._trigger()
        
    @abstractmethod
    def unload(self):
        #TODO proper exception
        if self._empty.get(): raise Exception("Port is empty.")
        self.has_changed._trigger()
        
    @abstractmethod
    def size(self):
        pass
    

# %% ../nbs/api/packet_container.ipynb 10
class SinglePacketContainer(PacketContainer):
    def __init__(self):
        super().__init__()
        self._packet = None
       
    def _set_full_state(self):
        self._full.set(True)
        self._empty.set(False)
        
    def _set_empty_state(self):
        self._full.set(False)
        self._empty.set(True)
    
    def load(self,
            packet: Packet):
        super().load(packet)
        self._packet = packet
        self._set_full_state()
        
    def unload(self):
        super().unload()
        packet = self._packet
        self._packet = None
        self._set_empty_state()

        return packet
    
    def size(self):
        if self._full.get():
            return 1
        else:
            return 0

# %% ../nbs/api/packet_container.ipynb 13
class DequePacketContainer(PacketContainer):
    def __init__(self, maxsize:int=None):
        super().__init__()
        if maxsize is not None and maxsize < 0:
            #TODO proper exception
            raise Exception("`maxsize` must be larger than 0.")
        self.maxsize = maxsize
        self._num_containers = maxsize if maxsize is not None else 1
        self._containers = [SinglePacketContainer() for i in range(self._num_containers)]
        self._filled_containers = deque(maxlen=self.maxsize)
        self._empty_containers = []
        self._empty_containers.extend(self._containers)
        
    def _update_status_events(self):        
        if len(self._filled_containers) > 0: self._empty.set(False)
        else: self._empty.set(True)
        if len(self._empty_containers) == 0 and self.maxsize is not None: self._full.set(True)
        else: self._full.set(False)

    def __add_more_containers_if_needed(self):
        if self.size() == self._num_containers:
            self._containers.append(SinglePacketContainer())
            self._empty_containers.append(SinglePacketContainer())
            self._num_containers += 1
    
    def load(self, packet: Packet):
        super().load(packet)
        self.__add_more_containers_if_needed()
        cnt = self._empty_containers.pop()
        cnt.load(packet)
        self._filled_containers.append(cnt)
        self._update_status_events()
        
    def load_left(self, packet: Packet):
        super().load(packet)
        self.__add_more_containers_if_needed()
        cnt = self._empty_containers.pop()
        cnt.load(packet)
        self._filled_containers.appendleft(cnt)
        self._update_status_events()
        
    def unload(self):
        super().unload()
        cnt = self._filled_containers.popleft()
        packet = cnt.unload()
        self._empty_containers.append(cnt)
        self._update_status_events()
        return packet
    
    def unload_right(self):
        super().unload()
        cnt = self._filled_containers.pop()
        packet = cnt.unload()
        self._empty_containers.append(cnt)
        self._update_status_events()
        return packet

    def unload_all(self):
        super().unload()
        packets = [cnt.unload() for cnt in self._filled_containers]
        self._empty_containers.extend(self._filled_containers)
        self._filled_containers.clear()
    
    def size(self):
        return len(self._filled_containers)

