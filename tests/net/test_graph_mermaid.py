# AUTOGENERATED! DO NOT EDIT! File to edit: ../../test_nbs/graph/test_graph1.ipynb.

# %% auto 0
__all__ = ['sub_graph', 'sub_graph_component', 'sub_graph_node', 'dummy_component', 'sub_graph_edge0', 'dummy_node', 'top_graph',
           'top_graph_edge0', 'test_address_lookup', 'test_graph_to_mermaid']

# %% ../../test_nbs/graph/test_graph1.ipynb 1
import fbdev

# %% ../../test_nbs/graph/test_graph1.ipynb 2
from typing import Type, Optional, Union, Any, Tuple, Dict
import asyncio

from fbdev.component import func_component, PortSpecCollection, PortTypeSpec, PortSpec, PortType, DummyComponentFactory
from fbdev.graph import Graph, NodeSpec, EdgeSpec
from fbdev.node import Node, GraphComponentFactory

# %% ../../test_nbs/graph/test_graph1.ipynb 3
sub_graph = Graph(PortSpecCollection(
    input=PortTypeSpec(subgraph_in=PortSpec(dtype=int)),
    output=PortTypeSpec(subgraph_out=PortSpec(dtype=int))
))
sub_graph_component = GraphComponentFactory.get_component(sub_graph)
sub_graph_node = NodeSpec(sub_graph_component)
dummy_component = DummyComponentFactory.get_component(
    inputs=['in'],
    outputs=['out'],
    component_name='dummy'
)

sub_graph_edge0 = EdgeSpec()
sub_graph.add_edge(sub_graph_edge0)
sub_graph.add_edge(EdgeSpec())
dummy_node = NodeSpec(dummy_component)
sub_graph.add_node(dummy_node)

sub_graph.connect_edge_to_graph_port(PortType.INPUT, 'subgraph_in', 0)
sub_graph.connect_edge_to_node('dummy', PortType.INPUT, 'in', 0)
sub_graph.connect_edge_to_graph_port(PortType.OUTPUT, 'subgraph_out', 1)
sub_graph.connect_edge_to_node('dummy', PortType.OUTPUT, 'out', 1)

top_graph = Graph(PortSpecCollection(
    input=PortTypeSpec(graph_in=PortSpec(dtype=int)),
    output=PortTypeSpec(graph_out=PortSpec(dtype=int))
))

top_graph_edge0 = EdgeSpec()
top_graph.add_edge(top_graph_edge0)
top_graph.add_edge(EdgeSpec())
sub_graph_node = NodeSpec(sub_graph_component)
top_graph.add_node(sub_graph_node, id='subgraph')

top_graph.connect_edge_to_graph_port(PortType.INPUT, 'graph_in', 0)
top_graph.connect_edge_to_node('subgraph', PortType.INPUT, 'subgraph_in', 0)
top_graph.connect_edge_to_graph_port(PortType.OUTPUT, 'graph_out', 1)
top_graph.connect_edge_to_node('subgraph', PortType.OUTPUT, 'subgraph_out', 1)

# %% ../../test_nbs/graph/test_graph1.ipynb 6
def test_address_lookup():
    assert top_graph.get_by_address('>net>subgraph') == sub_graph_node
    assert top_graph.get_by_address('>net>subgraph>dummy') == dummy_node
    assert top_graph.get_by_address('>net>subgraph|0') == sub_graph_edge0
    assert top_graph.get_by_address('>net|0') == top_graph_edge0

# %% ../../test_nbs/graph/test_graph1.ipynb 7
def test_graph_to_mermaid():
    sub_graph.to_mermaid()
    top_graph.to_mermaid()
